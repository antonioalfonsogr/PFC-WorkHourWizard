import { Injectable, ɵɵdefineInjectable, ɵɵinject, Pipe, NgModule } from '@angular/core';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { has, get, cloneDeep } from 'lodash';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common/http';
class DdrConfigurationService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} pathJSON
     * @return {?}
     */
    getDataFromJSON(pathJSON) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.http.get(pathJSON).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                this._data = data;
                resolve(true);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                console.error("Ddr-Conf: ", error);
                reject(true);
            }));
        }));
    }
    /**
     * @param {?} path
     * @return {?}
     */
    getData(path) {
        if (!has(this._data, path)) {
            console.error("Not exists path: " + path);
            return null;
        }
        else {
            return get(this._data, path);
        }
    }
    /**
     * @return {?}
     */
    getAllData() {
        return cloneDeep(this._data);
    }
}
DdrConfigurationService.ɵfac = function DdrConfigurationService_Factory(t) { return new (t || DdrConfigurationService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };
DdrConfigurationService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DdrConfigurationService, factory: DdrConfigurationService.ɵfac, providedIn: 'root' });
/** @nocollapse */
DdrConfigurationService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ DdrConfigurationService.ngInjectableDef = ɵɵdefineInjectable({ factory: function DdrConfigurationService_Factory() { return new DdrConfigurationService(ɵɵinject(HttpClient)); }, token: DdrConfigurationService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DdrConfigurationService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.HttpClient }]; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    DdrConfigurationService.prototype._data;
    /**
     * @type {?}
     * @private
     */
    DdrConfigurationService.prototype.http;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GetDataConfPipe {
    /**
     * @param {?} ddrConfiguration
     */
    constructor(ddrConfiguration) {
        this.ddrConfiguration = ddrConfiguration;
    }
    /**
     * @param {?} path
     * @return {?}
     */
    transform(path) {
        return this.ddrConfiguration.getData(path);
    }
}
GetDataConfPipe.ɵfac = function GetDataConfPipe_Factory(t) { return new (t || GetDataConfPipe)(ɵngcc0.ɵɵdirectiveInject(DdrConfigurationService, 16)); };
GetDataConfPipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: "getDataConf", type: GetDataConfPipe, pure: true });
/** @nocollapse */
GetDataConfPipe.ctorParameters = () => [
    { type: DdrConfigurationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GetDataConfPipe, [{
        type: Pipe,
        args: [{
                name: 'getDataConf'
            }]
    }], function () { return [{ type: DdrConfigurationService }]; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    GetDataConfPipe.prototype.ddrConfiguration;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DdrConfigurationModule {
}
DdrConfigurationModule.ɵfac = function DdrConfigurationModule_Factory(t) { return new (t || DdrConfigurationModule)(); };
DdrConfigurationModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DdrConfigurationModule });
DdrConfigurationModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [HttpClientModule] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DdrConfigurationModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    GetDataConfPipe
                ],
                imports: [
                    HttpClientModule
                ],
                exports: [GetDataConfPipe]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DdrConfigurationModule, { declarations: function () { return [GetDataConfPipe]; }, imports: function () { return [HttpClientModule]; }, exports: function () { return [GetDataConfPipe]; } }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { DdrConfigurationModule, DdrConfigurationService, GetDataConfPipe as ɵa };

//# sourceMappingURL=ddr-configuration.js.map