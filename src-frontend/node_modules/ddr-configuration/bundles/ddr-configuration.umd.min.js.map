{"version":3,"sources":["ng://ddr-configuration/lib/ddr-configuration.service.ts","ng://ddr-configuration/lib/get-data-conf.pipe.ts","ng://ddr-configuration/lib/ddr-configuration.module.ts"],"names":["DdrConfigurationService","http","this","prototype","getDataFromJSON","pathJSON","_this","Promise","resolve","reject","get","subscribe","data","_data","error","console","getData","path","_.has","_.get","getAllData","_.cloneDeep","Injectable","args","providedIn","HttpClient","GetDataConfPipe","ddrConfiguration","transform","Pipe","name","DdrConfigurationModule","NgModule","declarations","imports","HttpClientModule","exports"],"mappings":"2YAAA,IAAAA,EAAA,WAWE,SAAAA,EAAoBC,GAAAC,KAAAD,KAAAA,SAEpBD,EAAAG,UAAAC,gBAAA,SAAgBC,GAAhB,IAAAC,EAAAJ,KACE,OAAO,IAAIK,SAAO,SAAEC,EAASC,GAC3BH,EAAKL,KAAKS,IAAIL,GAAUM,WAAS,SAACC,GAChCN,EAAKO,MAAQD,EACbJ,GAAQ,MACT,SAAEM,GACDC,QAAQD,MAAM,aAAcA,GAC5BL,GAAO,UAKbT,EAAAG,UAAAa,QAAA,SAAQC,GACN,OAAKC,EAAAA,IAAMhB,KAAKW,MAAOI,GAIdE,EAAAA,IAAMjB,KAAKW,MAAOI,IAHzBF,QAAQD,MAAM,oBAAsBG,GAC7B,OAMXjB,EAAAG,UAAAiB,WAAA,WACE,OAAOC,EAAAA,UAAYnB,KAAKW,4BA/B3BS,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAJLC,EAAAA,+IADT,GCAA,IAAAC,EAAA,WAQE,SAAAA,EAAoBC,GAAAzB,KAAAyB,iBAAAA,EAMtB,OAJED,EAAAvB,UAAAyB,UAAA,SAAUX,GACR,OAAOf,KAAKyB,iBAAiBX,QAAQC,wBARxCY,EAAAA,KAAIN,KAAA,CAAC,CACJO,KAAM,2DAHC9B,KAaT0B,EAdA,GCAA,IAAAK,EAAA,WAMA,SAAAA,KASsC,2BATrCC,EAAAA,SAAQT,KAAA,CAAC,CACRU,aAAc,CACZP,GAEFQ,QAAS,CACPC,EAAAA,kBAEFC,QAAS,CAACV,OAE0BK,EAftC","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport * as _ from 'lodash';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DdrConfigurationService {\n\n  private _data: any;\n\n  constructor(private http: HttpClient) { }\n\n  getDataFromJSON(pathJSON: string) {\n    return new Promise((resolve, reject) => {\n      this.http.get(pathJSON).subscribe(data => {\n        this._data = data;\n        resolve(true);\n      }, error => {\n        console.error(\"Ddr-Conf: \", error);\n        reject(true);\n      })\n    })\n  }\n\n  getData(path: string) {\n    if (!_.has(this._data, path)) {\n      console.error(\"Not exists path: \" + path);\n      return null;\n    } else {\n      return _.get(this._data, path);\n    }\n  }\n\n  getAllData() {\n    return _.cloneDeep(this._data);\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DdrConfigurationService } from './ddr-configuration.service';\n\n@Pipe({\n  name: 'getDataConf'\n})\nexport class GetDataConfPipe implements PipeTransform {\n\n  constructor(private ddrConfiguration: DdrConfigurationService){ }\n\n  transform(path: string): any {\n    return this.ddrConfiguration.getData(path);\n  }\n\n}\n","import { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { GetDataConfPipe } from './get-data-conf.pipe';\n\n\n\n@NgModule({\n  declarations: [\n    GetDataConfPipe\n  ],\n  imports: [\n    HttpClientModule\n  ],\n  exports: [GetDataConfPipe]\n})\nexport class DdrConfigurationModule { }\n"]}