(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('lodash')) :
    typeof define === 'function' && define.amd ? define('ddr-configuration', ['exports', '@angular/core', '@angular/common/http', 'lodash'], factory) :
    (global = global || self, factory(global['ddr-configuration'] = {}, global.ng.core, global.ng.common.http, global.lodash));
}(this, (function (exports, core, http, lodash) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DdrConfigurationService = /** @class */ (function () {
        function DdrConfigurationService(http) {
            this.http = http;
        }
        /**
         * @param {?} pathJSON
         * @return {?}
         */
        DdrConfigurationService.prototype.getDataFromJSON = /**
         * @param {?} pathJSON
         * @return {?}
         */
        function (pathJSON) {
            var _this = this;
            return new Promise((/**
             * @param {?} resolve
             * @param {?} reject
             * @return {?}
             */
            function (resolve, reject) {
                _this.http.get(pathJSON).subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    _this._data = data;
                    resolve(true);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    console.error("Ddr-Conf: ", error);
                    reject(true);
                }));
            }));
        };
        /**
         * @param {?} path
         * @return {?}
         */
        DdrConfigurationService.prototype.getData = /**
         * @param {?} path
         * @return {?}
         */
        function (path) {
            if (!lodash.has(this._data, path)) {
                console.error("Not exists path: " + path);
                return null;
            }
            else {
                return lodash.get(this._data, path);
            }
        };
        /**
         * @return {?}
         */
        DdrConfigurationService.prototype.getAllData = /**
         * @return {?}
         */
        function () {
            return lodash.cloneDeep(this._data);
        };
        DdrConfigurationService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        DdrConfigurationService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        /** @nocollapse */ DdrConfigurationService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function DdrConfigurationService_Factory() { return new DdrConfigurationService(core.ɵɵinject(http.HttpClient)); }, token: DdrConfigurationService, providedIn: "root" });
        return DdrConfigurationService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        DdrConfigurationService.prototype._data;
        /**
         * @type {?}
         * @private
         */
        DdrConfigurationService.prototype.http;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GetDataConfPipe = /** @class */ (function () {
        function GetDataConfPipe(ddrConfiguration) {
            this.ddrConfiguration = ddrConfiguration;
        }
        /**
         * @param {?} path
         * @return {?}
         */
        GetDataConfPipe.prototype.transform = /**
         * @param {?} path
         * @return {?}
         */
        function (path) {
            return this.ddrConfiguration.getData(path);
        };
        GetDataConfPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'getDataConf'
                    },] }
        ];
        /** @nocollapse */
        GetDataConfPipe.ctorParameters = function () { return [
            { type: DdrConfigurationService }
        ]; };
        return GetDataConfPipe;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        GetDataConfPipe.prototype.ddrConfiguration;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DdrConfigurationModule = /** @class */ (function () {
        function DdrConfigurationModule() {
        }
        DdrConfigurationModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            GetDataConfPipe
                        ],
                        imports: [
                            http.HttpClientModule
                        ],
                        exports: [GetDataConfPipe]
                    },] }
        ];
        return DdrConfigurationModule;
    }());

    exports.DdrConfigurationModule = DdrConfigurationModule;
    exports.DdrConfigurationService = DdrConfigurationService;
    exports.ɵa = GetDataConfPipe;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ddr-configuration.umd.js.map
